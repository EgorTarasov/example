// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dashboard.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPipeLine = `-- name: CreatePipeLine :one
INSERT INTO pipelines(user_id, title, pipeline_description)
VALUES ($1, $2, $3)
RETURNING id,
    user_id,
    title,
    created_at,
    updated_at
`

type CreatePipeLineParams struct {
	UserID              int64
	Title               string
	PipelineDescription string
}

type CreatePipeLineRow struct {
	ID        int32
	UserID    int64
	Title     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreatePipeLine(ctx context.Context, arg CreatePipeLineParams) (CreatePipeLineRow, error) {
	row := q.db.QueryRow(ctx, createPipeLine, arg.UserID, arg.Title, arg.PipelineDescription)
	var i CreatePipeLineRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDashboardById = `-- name: GetDashboardById :many
SELECT id, user_id, title, pipeline_description, created_at, updated_at, deleted_at from pipelines
WHERE user_id = $1
`

func (q *Queries) GetDashboardById(ctx context.Context, userID int64) ([]Pipeline, error) {
	rows, err := q.db.Query(ctx, getDashboardById, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pipeline
	for rows.Next() {
		var i Pipeline
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.PipelineDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
